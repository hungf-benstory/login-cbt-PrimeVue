import {
  isNotEmpty,
  isObject
} from "./chunk-OVHFSBBD.js";
import "./chunk-SSYGV25P.js";

// node_modules/@primeuix/forms/utils/index.mjs
var toValues = (value, name) => {
  if (isObject(value) && value.hasOwnProperty(name)) {
    return value;
  }
  return name ? { [name]: value } : value;
};

// node_modules/@primeuix/forms/resolvers/zod/index.mjs
var zodResolver = (schema, schemaOptions, resolverOptions) => async ({ values, name }) => {
  const { sync = false, raw = false } = resolverOptions || {};
  try {
    const result = await schema[sync ? "parse" : "parseAsync"](values, schemaOptions);
    return {
      values: toValues(raw ? values : result, name),
      errors: {}
    };
  } catch (e) {
    if (Array.isArray(e == null ? void 0 : e.errors)) {
      return {
        values: toValues(raw ? values : void 0, name),
        errors: e.errors.reduce((acc, error) => {
          const pathKey = isNotEmpty(error.path) ? error.path[0] : name;
          if (pathKey) {
            acc[pathKey] || (acc[pathKey] = []);
            acc[pathKey].push(error);
          }
          return acc;
        }, {})
      };
    }
    throw e;
  }
};
export {
  zodResolver
};
//# sourceMappingURL=@primevue_forms_resolvers_zod.js.map
